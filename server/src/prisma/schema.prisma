// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int               @id @default(autoincrement())
  created       DateTime          @default(now())
  email         String            @unique
  username      String            @unique
  password      String
  bio           String            @default("Hey there! I'm using WhatsApp!")
  location      String            @default("The Moon")
  role          Role              @default(USER)
  gender        Gender            @default(Unspecified)
  reputation    Int               @default(0)
  banned        Boolean           @default(false)
  ban_reason    String            @default("You have been banned!")
  settings      UserSettings?
  sessions      Session[]
  favorites     Favorite[]
  torrents      Torrent[]
  notifications Notification[]
  downloads     Download[]
  inbox         InboundMessage[]
  outbox        OutboundMessage[]
  reports       UserReport[]
  subscriptions User[]            @relation("SubscriptionsSubscribers")
  subscribers   User[]            @relation("SubscriptionsSubscribers")
  comments      Comment[]
  ratings       Rating[]
}

model UserSettings {
  id                      Int     @id @default(autoincrement())
  hide_last_online        Boolean @default(false)
  disable_adult           Boolean @default(true)
  disable_torrent_history Boolean @default(false)
  user                    User    @relation(fields: [userId], references: [id])
  userId                  Int
}

model Torrent {
  id               String          @id @default(uuid())
  name             String
  description      String          @default("No description provided!")
  status           TorrentStatus   @default(AVAILABLE)
  positive_ratings Int             @default(0)
  negative_ratings Int             @default(0)
  size             String
  user             User            @relation(fields: [userId], references: [id])
  userId           Int
  elasticId        String
  b64torrent       String          @db.LongText
  xbt_torrent      Xbt_Torrents?
  favorites        Favorite[]
  downloads        Download[]
  comments         Comment[]
  reports          TorrentReport[]
  ratings          Rating[]
  category         Category        @default(Misc)
}

model Xbt_Torrents {
  tid       Int     @id @default(autoincrement())
  info_hash String
  seeders   Int     @default(0)
  leechers  Int     @default(0)
  completed Int     @default(0)
  flags     Int     @default(0)
  mtime     Int     @default(0)
  ctime     Int     @default(0)
  torrent   Torrent @relation(fields: [torrentId], references: [id])
  torrentId String
}

model Favorite {
  id        String  @id @default(uuid())
  torrent   Torrent @relation(fields: [torrentId], references: [id])
  torrentId String
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
}

model Session {
  id     String @id @default(uuid())
  ip     String
  device String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model Notification {
  id      String  @id @default(uuid())
  title   String
  message String
  read    Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
}

model Download {
  id        String   @id @default(uuid())
  date      DateTime @default(now())
  torrent   Torrent  @relation(fields: [torrentId], references: [id])
  torrentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model InboundMessage {
  id       String @id @default(uuid())
  title    String
  message  String
  user     User   @relation(fields: [userId], references: [id]) //receiver
  userId   Int
  senderId Int
}

model OutboundMessage {
  id         String @id @default(uuid())
  title      String
  message    String
  user       User   @relation(fields: [userId], references: [id]) //sender
  userId     Int
  receiverId Int
}

model UserReport {
  id     String @id @default(uuid())
  reason String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model TorrentReport {
  id        String  @id @default(uuid())
  reason    String
  torrent   Torrent @relation(fields: [torrentId], references: [id])
  torrentId String
}

model Comment {
  id             String    @id @default(uuid())
  comment        String
  createdAt      DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  torrent        Torrent   @relation(fields: [torrentId], references: [id])
  torrentId      String
  replies        Comment[] @relation("CommentReply")
  repliesTo      Comment?  @relation("CommentReply", fields: [replyCommentId], references: [id])
  replyCommentId String?
}

model Rating {
  id        String     @id @default(uuid())
  type      RatingType
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  torrent   Torrent    @relation(fields: [torrentId], references: [id])
  torrentId String
}

enum RatingType {
  POSITIVE
  NEGATIVE
}

enum TorrentStatus {
  BLOCKED
  AVAILABLE
  UNCONFIRMED
}

enum Role {
  USER
  UPLOADER
  STAFF
  ADMIN
}

enum Gender {
  Male
  Female
  Other
  Unspecified
}

enum Category {
  Movie
  Audio
  App
  Game
  Book
  Adult
  Misc
}
